-include $(PVI)/configure/CONFIG_SITE

# Note in these rules, we create the target in-source and then copy it to the build
# target. This is so that the resulting changes can be commited and used in builds
# without PVI available `$(@F)` is the file-within-directory part of the file name of
# the target, so `../$(@F)` is the source location of the file we want to generate
# See: https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html

ifdef BIN_PVI

# Rules

## Rule to create a Parameters template
%Parameters.template: $(TOP)/pvi/%.pvi.producer.yaml
	$(BIN_PVI) produce ../$(@F) $<
	cp ../$(@F) $@

## Rule to create a ParamSet header
%ParamSet.h: $(TOP)/pvi/%.pvi.producer.yaml
	$(BIN_PVI) produce ../$(@F) $<
	cp ../$(@F) $@

## Rule to create an adl UI
%.adl: $(TOP)/pvi/%.pvi.producer.yaml
	$(BIN_PVI) format $(PVI_ADLS)/$@ $< $(PVI)/tests/produce_format/input/aps.pvi.formatter.yaml --yaml-paths $(TOP)/pvi

## Rule to create an edl UI
%.edl: $(TOP)/pvi/%.pvi.producer.yaml
	$(BIN_PVI) format $(PVI_EDLS)/$@ $< $(PVI)/tests/produce_format/input/dls.edl.pvi.formatter.yaml --yaml-paths $(TOP)/pvi

## Rule to create a bob UI
%.bob: $(TOP)/pvi/%.pvi.producer.yaml
	$(BIN_PVI) format $(PVI_BOBS)/$@ $< $(PVI)/tests/produce_format/input/dls.bob.pvi.formatter.yaml --yaml-paths $(TOP)/pvi

# Generate UIs

## Find base names of components from YAML files
PVIS := $(wildcard $(TOP)/pvi/*.pvi.producer.yaml)
COMPONENTS := $(patsubst $(TOP)/pvi/%.pvi.producer.yaml, %, $(PVIS))

ifdef PVI_ADLS

## Generate an adl for every yaml
ADLS := $(patsubst %, %.adl, $(COMPONENTS))
install: $(ADLS)

endif # PVI_ADLS

ifdef PVI_EDLS

## Generate an edl for every yaml
EDLS := $(patsubst %, %.edl, $(COMPONENTS))
install: $(EDLS)

endif # PVI_EDLS

ifdef PVI_BOBS

## Generate a bob for every yaml
BOBS := $(patsubst %, %.bob, $(COMPONENTS))
install: $(BOBS)

endif # PVI_BOBS

endif # BIN_PVI
