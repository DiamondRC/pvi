# Note in these rules, we create the target in-source by copying it from the build
# target. This is so that the resulting changes can be commited and used in builds
# without PVI available. `$(@F)` is the file-within-directory part of the file name of
# the target, so `../$(@F)` is the source location of the file we want to generate
# See: https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html

# Only include this file once
ifneq ($(_RULES_PVI_INCLUDED),YES)
_RULES_PVI_INCLUDED := YES

ifndef BIN_PVI
# If not defined explicitly try to use from PATH
BIN_PVI := $(shell which pvi 2>/dev/null)
endif

# Do nothing if pvi is not found
ifdef BIN_PVI

$(info pvi found: $(BIN_PVI))

# Create --yaml-path arguments to pass to pvi commands
EMPTY :=
SPACE := $(EMPTY) $(EMPTY)
ifdef PVI_YAML_PATHS
# Prepend each path in PVI_YAML_PATHS with ' --yaml-path ' to pass to pvi call
# e.g. `PVI_YAML_PATHS=foo bar` -> `... --yaml-path foo --yaml-path bar`
EXPAND_PVI_YAML_PATHS = $(subst $(SPACE), --yaml-path , $(PVI_YAML_PATHS))
endif

# Rules #

## Rule to create a template file from a PVI yaml file ##
%Parameters.template: $(TOP)/pvi/%.pvi.producer.yaml
	$(BIN_PVI) produce $@ $<
	cp $@ ../$(@F)

### EPICS build rule to satisfy .d prerequisite when a corresponding yaml exists ###
# The actual target will be generated by pvi, so we don't need this rule to do anything
# See <base>/configure/RULES_BUILD for more information
%Parameters.template$(DEP): $(TOP)/pvi/%.pvi.producer.yaml ;

## Rule to create a ParamSet header file from a PVI yaml file ##
%ParamSet.h: $(TOP)/pvi/%.pvi.producer.yaml
	$(BIN_PVI) produce $@ $< $(EXPAND_PVI_YAML_PATHS)

## Rule to create an adl UI ##
$(PVI_ADLS)/%.adl: $(TOP)/pvi/%.pvi.producer.yaml
	$(BIN_PVI) format $@ $< $(PVI)/formatters/aps.pvi.formatter.yaml $(EXPAND_PVI_YAML_PATHS)

## Rule to create an edl UI ##
$(PVI_EDLS)/%.edl: $(TOP)/pvi/%.pvi.producer.yaml
	$(BIN_PVI) format $@ $< $(PVI)/formatters/dls.edl.pvi.formatter.yaml $(EXPAND_PVI_YAML_PATHS)

## Rule to create a bob UI ##
$(PVI_BOBS)/%.bob: $(TOP)/pvi/%.pvi.producer.yaml
	$(BIN_PVI) format $@ $< $(PVI)/formatters/dls.bob.pvi.formatter.yaml $(EXPAND_PVI_YAML_PATHS)


# Install targets #

## Find base names of components from YAML files ##
PVIS := $(wildcard $(TOP)/pvi/*.pvi.producer.yaml)
COMPONENTS := $(patsubst $(TOP)/pvi/%.pvi.producer.yaml, %, $(PVIS))

## Generate templates ##
ifneq ($(PVI_TEMPLATES),)

ifeq ($(PVI_TEMPLATES),YES)
PVI_TEMPLATES := $(patsubst %, %Parameters.template, $(COMPONENTS))
endif

install: $(PVI_TEMPLATES)

endif  # PVI_TEMPLATES defined

## Generate ParamSet header files ##
ifneq ($(PVI_PARAMSETS),)

ifeq ($(PVI_PARAMSETS),YES)
PVI_PARAMSETS := $(patsubst %, %ParamSet.h, $(COMPONENTS))
endif

install: $(PVI_PARAMSETS)

endif  # PVI_PARAMSETS defined

## Generate adls ##
ifdef PVI_ADLS

ADLS := $(patsubst %, $(PVI_ADLS)/%.adl, $(COMPONENTS))
install: $(PVI_ADLS) $(ADLS)

$(PVI_ADLS):
	mkdir -p $@

endif

## Generate edls ##
ifdef PVI_EDLS

EDLS := $(patsubst %, $(PVI_EDLS)/%.edl, $(COMPONENTS))
install:  $(PVI_EDLS) $(EDLS)

$(PVI_EDLS):
	mkdir -p $@

endif

## Generate bobs ##
ifdef PVI_BOBS

BOBS := $(patsubst %, $(PVI_BOBS)/%.bob, $(COMPONENTS))
install: $(PVI_BOBS) $(BOBS)

$(PVI_BOBS):
	mkdir -p $@

endif

ifneq ($(PVI_PARAMSETS)$(PVI_TEMPLATES),)

ifeq ($(BASE_3_14),YES)
clean::
else
clean:
endif
	touch $(TOP)/pvi/*pvi.producer.yaml

else ifneq ($(PVI_ADLS)$(PVI_EDLS)$(PVI_BOBS),)

clean:
	touch $(TOP)/pvi/*pvi.producer.yaml

endif

else

$(info pvi not found)

endif # BIN_PVI

endif # _RULES_PVI_INCLUDED
