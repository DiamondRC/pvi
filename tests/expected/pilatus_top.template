# Database for the records specific to the Pilatus driver
# Mark Rivers
# July 25, 2008

# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout
# % macro, CAMSERVER_PORT, Asyn IPPort attached to camserver

# All tags starting with gdatag are DLS specific for GDA
# % gdatag, template, ADPilatus, $(PORT)_pilatus, $(PORT) Pilatus class instance

# This associates the template with an edm screen
# % gui, $(PORT), edmtab, pilatusDetector.edl, P=$(P),R=$(R)

include "pilatus_detail.template"

include "pilatusParameters.template"
include "ADBase.template"
include "NDFile.template"

# We redefine the states for the TriggerMode records defined in ADBase.template
record(mbbo,"$(P)$(R)TriggerMode") {
    field(DESC,"Acquire mode")
    field(ZRVL,"0")
    field(ZRST,"Internal")
    field(ONVL,"1")
    field(ONST,"Ext. Enable")
    field(TWVL,"2")
    field(TWST,"Ext. Trigger")
    field(THVL,"3")
    field(THST,"Mult. Trigger")
    field(FRVL,"4")
    field(FRST,"Alignment")
}

record(mbbi,"$(P)$(R)TriggerMode_RBV") {
    field(DESC,"Acquire mode")
    field(ZRVL,"0")
    field(ZRST,"Internal")
    field(ONVL,"1")
    field(ONST,"Ext. Enable")
    field(TWVL,"2")
    field(TWST,"Ext. Trigger")
    field(THVL,"3")
    field(THST,"Mult. Trigger")
    field(FRVL,"4")
    field(FRST,"Alignment")
}

# We redefine the states for the FileFormat records defined in NDFile.template
record(mbbo, "$(P)$(R)FileFormat")
{
    field(ZRST, "TIFF")
    field(ZRVL, "0")
    field(ONST, "Invalid")
    field(ONVL, "1")
}

record(mbbi, "$(P)$(R)FileFormat_RBV")
{
    field(ZRST, "TIFF")
    field(ZRVL, "0")
    field(ONST, "Invalid")
    field(ONVL, "1")
}

# Armed flag, which indicates Pilatus is ready for external triggers
# % gdatag, binary, ro, $(PORT)_pilatus, Armed, Armed flag


# Reset module power 


# Reset module power delay time


# Reset module power delay time


# Delay time in External Trigger mode.
# % gdatag, pv, rw, $(PORT)_pilatus, DelayTime, Set DelayTime


# % gdatag, pv, ro, $(PORT)_pilatus, DelayTime_RBV, Readback for DelayTime


# Threshold energy
# % gdatag, pv, rw, $(PORT)_pilatus, ThresholdEnergy, Set ThresholdEnergy


# % gdatag, pv, ro, $(PORT)_pilatus, ThresholdEnergy_RBV, Readback for ThresholdEnergy
# % archiver 10 Monitor


# Threshold apply command


# Threshold auto apply flag


# Threshold auto apply flag


# X-ray energy




# Gain menu.  This writes to the Gain PV in the base database.
# % gdatag, mbbinary, rw, $(PORT)_pilatus, GainMenu, Set Gain
record(mbbo, "$(P)$(R)GainMenu")
{
    field(DESC, "Shaping time and gain")
    field(DTYP, "Raw Soft Channel")
    field(OUT,  "$(P)$(R)Gain.VAL PP MS")
    field(ZRST, "7-30KeV/Fast/LowG")
    field(ZRVL, "0")
    field(ONST, "5-18KeV/Med/MedG")
    field(ONVL, "1")
    field(TWST, "3-6KeV/Slow/HighG")
    field(TWVL, "2")
    field(THST, "2-5KeV/Slow/UltraG")
    field(THVL, "3")
    field(VAL,  "1")
    info(autosaveFields, "VAL")
}


# Timeout waiting for image to be written to file system
# % gdatag, pv, rw, $(PORT)_pilatus, ImageFileTmot, Set ImageFileTmot


# Bad pixel file
# % gdatag, array, rw, $(PORT)_pilatus, BadPixelFile, Set BadPixelFile


# Number of bad pixels
# % gdatag, pv, ro, $(PORT)_pilatus, NumBadPixels, Read NumBadPixels


# Flat field file
# % gdatag, array, rw, $(PORT)_pilatus, FlatFieldFile, Set FlatFieldFile


# Minimum flat field value
# % gdatag, pv, rw, $(PORT)_pilatus, MinFlatField, Set MinFlatField


# % gdatag, pv, ro, $(PORT)_pilatus, MinFlatField_RBV, Readback for MinFlatField


# Flat field valid flag.
# % gdatag, binary, ro, $(PORT)_pilatus, FlatFieldValid, FlatFieldValid flag


# % gdatag, pv, rw, $(PORT)_pilatus, GapFill, Set GapFill


# % gdatag, pv, rw, $(PORT)_pilatus, GapFill_RBV, Readback for GapFill



# asyn record for interactive communication with camserver
record(asyn, "$(P)$(R)CamserverAsyn")
{
    field(PORT,  "$(CAMSERVER_PORT)")
    field(IMAX, "64")
    field(OMAX, "64")
    field(AUCT, "0")
}

# ancillary information

# % gdatag, pv, rw, $(PORT)_pilatus, Wavelength, Set Wavelength


# % gdatag, pv, rw, $(PORT)_pilatus, EnergyLow, Set EnergyLow


# % gdatag, pv, rw, $(PORT)_pilatus, EnergyHigh, Set EnergyHigh


# % gdatag, pv, rw, $(PORT)_pilatus, DetDist, Set DetDist


# % gdatag, pv, rw, $(PORT)_pilatus, DetVOffset, Set DetVOffset


# % gdatag, pv, rw, $(PORT)_pilatus, BeamX, Set BeamX


# % gdatag, pv, rw, $(PORT)_pilatus, BeamY, Set BeamY


# % gdatag, pv, rw, $(PORT)_pilatus, Flux, Set Flux


# % gdatag, pv, rw, $(PORT)_pilatus, FilterTransm, Set FilterTransm


# % gdatag, pv, rw, $(PORT)_pilatus, StartAngle, Set StartAngle


# % gdatag, pv, rw, $(PORT)_pilatus, AngleIncr, Set AngleIncr


# % gdatag, pv, rw, $(PORT)_pilatus, Det2theta, Set Det2theta


# % gdatag, pv, rw, $(PORT)_pilatus, Polarization, Set Polarization


# % gdatag, pv, rw, $(PORT)_pilatus, Alpha, Set Alpha


# % gdatag, pv, rw, $(PORT)_pilatus, Kappa, Set Kappa


# % gdatag, pv, rw, $(PORT)_pilatus, Phi, Set Phi


# % gdatag, pv, rw, $(PORT)_pilatus, PhiIncr, Set PhiIncr


# % gdatag, pv, rw, $(PORT)_pilatus, Chi, Set Chi


# % gdatag, pv, rw, $(PORT)_pilatus, ChiIncr, Set ChiIncr


# % gdatag, pv, rw, $(PORT)_pilatus, Omega, Set Omega


# % gdatag, pv, rw, $(PORT)_pilatus, OmegaIncr, Set OmegaIncr


# % gdatag, pv, rw, $(PORT)_pilatus, OscillAxis, Set OscillAxis


# % gdatag, pv, rw, $(PORT)_pilatus, NumOscill, Set NumOscill



# Set DISA for PVs in ADBase that do not apply to Pilatus

record(mbbo, "$(P)$(R)DataType")
{
    field(DISA, "1")
}
record(mbbi, "$(P)$(R)DataType_RBV")
{
    field(DISA, "1")
}
record(mbbo, "$(P)$(R)ColorMode")
{
    field(DISA, "1")
}
record(mbbi, "$(P)$(R)ColorMode_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)BinX")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)BinX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)BinY")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)BinY_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)MinX")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)MinX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)MinY")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)MinY_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)SizeX")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)SizeX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)SizeY")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)SizeY_RBV")
{
    field(DISA, "1")
}
record(bo, "$(P)$(R)ReverseX")
{
    field(DISA, "1")
}
record(bi, "$(P)$(R)ReverseX_RBV")
{
    field(DISA, "1")
}
record(bo, "$(P)$(R)ReverseY")
{
    field(DISA, "1")
}
record(bi, "$(P)$(R)ReverseY_RBV")
{
    field(DISA, "1")
}

# % gdatag, pv, ro, $(PORT)_pilatus, PixelCutOff_RBV, Readback for tau pixel cut off


# % archiver 10 Monitor


# % archiver 10 Monitor


# % archiver 10 Monitor


# % archiver 10 Monitor


# % archiver 10 Monitor


# % archiver 10 Monitor




# % gdatag, array, rw, $(PORT)_pilatus, CbfTemplateFile, Set CbfTemplateFile




